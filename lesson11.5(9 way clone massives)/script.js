let a = [1, 3, 5, [6, 7]]
// let b = a
/* 1. ----работает только для одномерных массивов.Не решает проблему вложенных массивов */
// let b = [...a]

/* 2. ----работает только для одномерных массивов.Не решает проблему вложенных массивов */
// let b = []
// for (let i = 0; i < a.length; i++) {
// 	b[i] = a[i]
// }

/* 3. ---- работает только для одномерных массивов.Не решает проблему вложенных массивов  */
// let b = a.map(x => x)

/* 4. ---- работает только для одномерных массивов.Не решает проблему вложенных массивов  */
// let b = a.filter(() => true)

/* 5. ---- работает только для одномерных массивов.Не решает проблему вложенных массивов  */
// let b = a.reduce((c, elem) => {
// 	c.push(elem)
// 	return c
// }, [])

/* 6. ----работает только для одномерных массивов.Не решает проблему вложенных массивов */
// let b = a.slice()


/*------------------------------------------------*/
/* 7. ----работает для любых массивов. Решает проблему вложенных массивов */
// Операция требовательная к ресурсам.!!
// Ломает объекты вложенные внутрь массива!!
// let b = JSON.parse(JSON.stringify(a))

/* 8. ----работает только для одномерных массивов.Не решает проблему вложенных массивовв */
// let b = a.concat([])

/* 9. ----работает только для одномерных массивов.Не решает проблему вложенных массивовв */
// let b = Array.from(a)



a.push('test')
a[3].push(999)

console.log('array a')
console.log(a)

console.log('array b')
console.log(b)
